#include "PlantShootEvent.h"

BYTE hook_466E09[] = { 0xE9,0x72,0x92,0x29,0x00,0x66,0x90 };

BYTE hook_ret[] = { JMPFAR(0), NOP };

BYTE hook_700060[] = {
	0x83,0xC4,0x1C,0x89,0x0D,0x54,0x00,0x70,
	0x00,0xC7,0x05,0x58,0x00,0x70,0x00,0x01,
	0x00,0x00,0x00,0x83,0x3D,0x58,0x00,0x70,
	0x00,0x00,0x75,0xF7,0xC2,0x10,0x00,0x90 };

BYTE hook_700080[] = {
	0x8B,0x6C,0x24,0x28,0x8B,0x45,0x24,0x89,
	0x2D,0x50,0x00,0x70,0x00,0xE9,0x7E,0x6D,
	0xD6,0xFF };

BYTE hook_466E09_raw[] = { 0x8B,0x6C,0x24,0x28,0x8B,0x45,0x24 };

BYTE hook_ret_raw[] = { 0x83,0xC4,0x1C,0xC2,0x10,0x00 };

int ret_address[] = { 0x466E7C, 0x466E93, 0x466EA9, 0x46731D, 0x467349,
	0x46737B, 0x4673AA, 0x46741F, 0x467430, 0x467550 };

void PlantShootEvent::start()
{
	PVZ::Memory::WriteArray<BYTE>(0x466E09, hook_466E09, 7);
	PVZ::Memory::WriteArray<BYTE>(0x700060, hook_700060, 32);
	PVZ::Memory::WriteArray<BYTE>(0x700080, hook_700080, 18);
	for (int i = 0; i < 10; i++)
	{
		SETARG(hook_ret, 1) = 0x700060 - ret_address[i] - 5;
		PVZ::Memory::WriteArray<BYTE>(ret_address[i], hook_ret, 6);
	}
}

void PlantShootEvent::run()
{
	int code = PVZ::Memory::ReadMemory<DWORD>(0x700058);
	if (code == 0) return;

	auto plant = std::make_shared<PVZ::Plant>(PVZ::Memory::ReadMemory<DWORD>(0x700050));
	auto projectile = std::make_shared<PVZ::Projectile>(PVZ::Memory::ReadMemory<DWORD>(0x700054));

	for (int i = 0; i < listeners.size(); i++)
	{
		listeners[i](plant, projectile);
	}

	PVZ::Memory::WriteMemory<DWORD>(0x700058, 0);
}

void PlantShootEvent::end()
{
	PVZ::Memory::WriteArray<BYTE>(0x466E09, hook_466E09_raw, 7);
	for (int i = 0; i < 10; i++)
	{
		PVZ::Memory::WriteArray<BYTE>(ret_address[i], hook_ret_raw, 6);
	}
}
